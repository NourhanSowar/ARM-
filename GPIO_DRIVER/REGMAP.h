
/*
 * REGMAP.h
 *
 *  Created on: Feb 19, 2020
 *      Author: TARGET
 */

#ifndef REGMAP_H_
#define REGMAP_H_



#define REG volatile unsigned long int *


//REGISTERS IN SYSTEM CONTROL
REG GPIOHBCTL =        0x400FE06C ;
REG RCGCGPIO  =        0x400FE608 ;




// *****************************************OFFSETS OF REGISTERS******************************//

#define     OFF_GPIODIR        0x400
#define     OFF_GPIOAFSEL      0x420
#define     OFF_GPIODR2R       0x500
#define     OFF_GPIODR4R       0x504
#define     OFF_GPIODR8R       0x508
#define     OFF_GPIODEN        0x51C
#define     OFF_GPIOPUR        0x510
#define     OFF_GPIODATA       0x000
#define     OFF_GPIOPCTL       0x52C   //used in conjunction with the GPIOAFSEL
#define     OFF_GPIOAMSEL      0x528   //GPIO Analog Mode Select
#define     OFF_GPIOSLR        0x518   //Slew Rate Control Select
#define     OFF_GPIOPDR        0x514
#define     OFF_GPIOODR        0x50C



//*********** ADDRESS OF  PORTS  BASE ADD+OFFSET******************//

#define     A_AHB_BASE        0x40058000
#define     B_AHB_BASE        0x40059000
#define     C_AHB_BASE        0x4005A000
#define     D_AHB_BASE        0x4005B000
#define     E_AHB_BASE        0x4005C000
#define     F_AHB_BASE        0x4005D000


#define     A_APB_BASE        0x40004000
#define     B_APB_BASE        0x40005000
#define     C_APB_BASE        0x40006000
#define     D_APB_BASE        0x40007000
#define     E_APB_BASE        0x40024000
#define     F_APB_BASE        0x40025000



//MACROS TO ADDRESS
#define AB(offest) A_AHB_BASE+offest
#define BB(offest) B_AHB_BASE+offest
#define CB(offest) C_AHB_BASE+offest
#define DB(offest) D_AHB_BASE+offest
#define EB(offest) E_AHB_BASE+offest
#define FB(offest) F_AHB_BASE+offest

//MACROS TO ADDRESS
#define AB_APB(offest) A_APB_BASE+offest
#define BB_APB(offest) B_APB_BASE+offest
#define CB_APB(offest) C_APB_BASE+offest
#define DB_APB(offest) D_APB_BASE+offest
#define EB_APB(offest) E_APB_BASE+offest
#define FB_APB(offest) F_APB_BASE+offest





//void REGPORTA_INTI_AHB

REG  GPIODIR =  AB(OFF_GPIODIR);
REG  GPIOAFSEL= AB(OFF_GPIOAFSEL);
REG  GPIODR8R = AB(OFF_GPIODR8R);
REG  GPIODR4R = AB(OFF_GPIODR4R);
REG  GPIODR2R = AB(OFF_GPIODR2R);

REG  GPIODEN=   AB(OFF_GPIODEN);
REG GPIOPUR =   AB(OFF_GPIOPUR);
REG GPIODATA =  AB(OFF_GPIODATA);
REG GPIOPCTL =  AB(OFF_GPIOPCTL);
REG GPIOAMSEL = AB(OFF_GPIOAMSEL);
REG GPIOSLR  =  AB(OFF_GPIOSLR);
REG GPIOPDR  =  AB(OFF_GPIOPDR);
REG GPIOODR  =  AB(OFF_GPIOODR);






void REGPORTB_INTI_AHB()
{

REG  GPIODIR =  BB(OFF_GPIODIR);
REG  GPIOAFSEL= BB(OFF_GPIOAFSEL);
REG  GPIODR8R = BB(OFF_GPIODR8R);
REG  GPIODEN=   BB(OFF_GPIODEN);
REG GPIOPUR =   BB(OFF_GPIOPUR);
REG GPIODATA =  BB(OFF_GPIODATA);
REG GPIOPCTL =  BB(OFF_GPIOPCTL);
REG GPIOAMSEL = BB(OFF_GPIOAMSEL);
REG GPIOSLR  =  BB(OFF_GPIOSLR);
REG GPIOPDR  =  BB(OFF_GPIOPDR);
REG GPIOODR  =  BB(OFF_GPIOODR);
}



void REG_PORTC_INTI_AHB()
{

    REG  GPIODIR =  CB(OFF_GPIODIR);
    REG  GPIOAFSEL= CB(OFF_GPIOAFSEL);
    REG  GPIODR8R = CB(OFF_GPIODR8R);
    REG  GPIODEN=   CB(OFF_GPIODEN);
    REG GPIOPUR =   CB(OFF_GPIOPUR);
    REG GPIODATA =  CB(OFF_GPIODATA);
    REG GPIOPCTL =  CB(OFF_GPIOPCTL);
    REG GPIOAMSEL = CB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  CB(OFF_GPIOSLR);
    REG GPIOPDR  =  CB(OFF_GPIOPDR);
    REG GPIOODR  =  CB(OFF_GPIOODR);

}


void REG_PORTD_INTI_AHB()
{

REG  GPIODIR =  DB(OFF_GPIODIR);
REG  GPIOAFSEL= DB(OFF_GPIOAFSEL);
REG  GPIODR8R = DB(OFF_GPIODR8R);
REG  GPIODEN=   DB(OFF_GPIODEN);
REG GPIOPUR =   DB(OFF_GPIOPUR);
REG GPIODATA =  DB(OFF_GPIODATA);
REG GPIOPCTL =  DB(OFF_GPIOPCTL);
REG GPIOAMSEL = DB(OFF_GPIOAMSEL);
REG GPIOSLR  =  DB(OFF_GPIOSLR);
REG GPIOPDR  =  DB(OFF_GPIOPDR);
REG GPIOODR  =  DB(OFF_GPIOODR);

}



void REG_PORTE_INTI_AHB()
{


    REG  GPIODIR =  EB(OFF_GPIODIR);
    REG  GPIOAFSEL= EB(OFF_GPIOAFSEL);
    REG  GPIODR8R = EB(OFF_GPIODR8R);
    REG  GPIODEN=   EB(OFF_GPIODEN);
    REG GPIOPUR =   EB(OFF_GPIOPUR);
    REG GPIODATA =  EB(OFF_GPIODATA);
    REG GPIOPCTL =  EB(OFF_GPIOPCTL);
    REG GPIOAMSEL = EB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  EB(OFF_GPIOSLR);
    REG GPIOPDR  =  EB(OFF_GPIOPDR);
    REG GPIOODR  =  EB(OFF_GPIOODR);


}

void REG_PORTF_INTI_AHB()
{



    REG  GPIODIR =  FB(OFF_GPIODIR);
    REG  GPIOAFSEL= FB(OFF_GPIOAFSEL);
    REG  GPIODR8R = FB(OFF_GPIODR8R);
    REG  GPIODEN=   FB(OFF_GPIODEN);
    REG GPIOPUR =   FB(OFF_GPIOPUR);
    REG GPIODATA =  FB(OFF_GPIODATA);
    REG GPIOPCTL =  FB(OFF_GPIOPCTL);
    REG GPIOAMSEL = FB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  FB(OFF_GPIOSLR);
    REG GPIOPDR  =  FB(OFF_GPIOPDR);
    REG GPIOODR  =  FB(OFF_GPIOODR);


}


void REG_PORTA_INTI_APB()
{



    REG  GPIODIR =  AB_APB(OFF_GPIODIR);
    REG  GPIOAFSEL= AB_APB(OFF_GPIOAFSEL);
    REG  GPIODR8R = AB_APB(OFF_GPIODR8R);
    REG  GPIODEN=   AB_APB(OFF_GPIODEN);
    REG GPIOPUR =   AB_APB(OFF_GPIOPUR);
    REG GPIODATA =  AB_APB(OFF_GPIODATA);
    REG GPIOPCTL =  AB_APB(OFF_GPIOPCTL);
    REG GPIOAMSEL = AB_APB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  AB_APB(OFF_GPIOSLR);
    REG GPIOPDR  =  AB_APB(OFF_GPIOPDR);
    REG GPIOODR  =  AB_APB(OFF_GPIOODR);



}


void REG_PORTB_INTI_APB()
{




    REG  GPIODIR =  BB_APB(OFF_GPIODIR);
    REG  GPIOAFSEL= BB_APB(OFF_GPIOAFSEL);
    REG  GPIODR8R = BB_APB(OFF_GPIODR8R);
    REG  GPIODEN=   BB_APB(OFF_GPIODEN);
    REG GPIOPUR =   BB_APB(OFF_GPIOPUR);
    REG GPIODATA =  BB_APB(OFF_GPIODATA);
    REG GPIOPCTL =  BB_APB(OFF_GPIOPCTL);
    REG GPIOAMSEL = BB_APB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  BB_APB(OFF_GPIOSLR);
    REG GPIOPDR  =  BB_APB(OFF_GPIOPDR);
    REG GPIOODR  =  BB_APB(OFF_GPIOODR);

}

void REG_PORTC_INTI_APB()
{




    REG  GPIODIR =  CB_APB(OFF_GPIODIR);
    REG  GPIOAFSEL= CB_APB(OFF_GPIOAFSEL);
    REG  GPIODR8R = CB_APB(OFF_GPIODR8R);
    REG  GPIODEN=   CB_APB(OFF_GPIODEN);
    REG GPIOPUR =   CB_APB(OFF_GPIOPUR);
    REG GPIODATA =  CB_APB(OFF_GPIODATA);
    REG GPIOPCTL =  CB_APB(OFF_GPIOPCTL);
    REG GPIOAMSEL = CB_APB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  CB_APB(OFF_GPIOSLR);
    REG GPIOPDR  =  CB_APB(OFF_GPIOPDR);
    REG GPIOODR  =  CB_APB(OFF_GPIOODR);

}



void REG_PORTD_INTI_APB()
{




    REG  GPIODIR =  DB_APB(OFF_GPIODIR);
    REG  GPIOAFSEL= DB_APB(OFF_GPIOAFSEL);
    REG  GPIODR8R = DB_APB(OFF_GPIODR8R);
    REG  GPIODEN=   DB_APB(OFF_GPIODEN);
    REG GPIOPUR =   DB_APB(OFF_GPIOPUR);
    REG GPIODATA =  DB_APB(OFF_GPIODATA);
    REG GPIOPCTL =  DB_APB(OFF_GPIOPCTL);
    REG GPIOAMSEL = DB_APB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  DB_APB(OFF_GPIOSLR);
    REG GPIOPDR  =  DB_APB(OFF_GPIOPDR);
    REG GPIOODR  =  DB_APB(OFF_GPIOODR);

}

void REG_PORTE_INTI_APB()
{

    REG  GPIODIR =  EB_APB(OFF_GPIODIR);
    REG  GPIOAFSEL= EB_APB(OFF_GPIOAFSEL);
    REG  GPIODR8R = EB_APB(OFF_GPIODR8R);
    REG  GPIODEN=   EB_APB(OFF_GPIODEN);
    REG GPIOPUR =   EB_APB(OFF_GPIOPUR);
    REG GPIODATA =  EB_APB(OFF_GPIODATA);
    REG GPIOPCTL =  EB_APB(OFF_GPIOPCTL);
    REG GPIOAMSEL = EB_APB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  EB_APB(OFF_GPIOSLR);
    REG GPIOPDR  =  EB_APB(OFF_GPIOPDR);
    REG GPIOODR  =  EB_APB(OFF_GPIOODR);
}

void REG_PORTF_INTI_APB()
{
    REG  GPIODIR =  FB_APB(OFF_GPIODIR);
    REG  GPIOAFSEL= FB_APB(OFF_GPIOAFSEL);
    REG  GPIODR8R = FB_APB(OFF_GPIODR8R);
    REG  GPIODEN=   FB_APB(OFF_GPIODEN);
    REG GPIOPUR =   FB_APB(OFF_GPIOPUR);
    REG GPIODATA =  FB_APB(OFF_GPIODATA);
    REG GPIOPCTL =  FB_APB(OFF_GPIOPCTL);
    REG GPIOAMSEL = FB_APB(OFF_GPIOAMSEL);
    REG GPIOSLR  =  FB_APB(OFF_GPIOSLR);
    REG GPIOPDR  =  FB_APB(OFF_GPIOPDR);
    REG GPIOODR  =  FB_APB(OFF_GPIOODR);

}












#endif /* REGMAP_H_ */
